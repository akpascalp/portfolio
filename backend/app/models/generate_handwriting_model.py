# -*- coding: utf-8 -*-
"""Copie de handwriting.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17fQ8fnIXn60V9OUJzs-n3Roc5Lfx6SYE
"""

!pip install tensorflow==2.12.0
!pip install kagglehub
import os
import tensorflow as tf
import numpy as np
from tensorflow import keras
from tensorflow.keras import layers, models
from tensorflow.keras.utils import to_categorical
import kagglehub
import matplotlib.pyplot as plt
from pathlib import Path

path = kagglehub.dataset_download("programmerjohncarter/handwriting-dataset-updated-for-torchvision")
path = Path(path) / "Handwriting_dataset"

train_dataset = tf.keras.preprocessing.image_dataset_from_directory(
    path,
    image_size=(28, 28),
    color_mode='grayscale',
    batch_size=32,
    label_mode='int',
    # validation_split=0.2,
    # subset="training",
    seed=123
)

# val_dataset = tf.keras.preprocessing.image_dataset_from_directory(
#     path,
#     image_size=(28, 28),
#     color_mode='grayscale',
#     batch_size=32,
#     label_mode='int',
#     validation_split=0.2,
#     subset="validation",
#     seed=123
# )

normalization_layer = layers.Rescaling(1./255)

train_dataset = train_dataset.map(lambda x, y: (normalization_layer(x), y))
# val_dataset = val_dataset.map(lambda x, y: (normalization_layer(x), y))

model = models.Sequential([
    layers.InputLayer(input_shape=(28, 28, 1)),
    layers.Conv2D(32, (3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(64, (3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(64, (3, 3), activation='relu'),
    layers.Flatten(),
    layers.Dense(64, activation='relu'),
    layers.Dense(36, activation='softmax')
])

model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

history = model.fit(
    train_dataset,
    epochs=10,
    # validation_data=val_dataset
)

# plt.figure(figsize=(12, 4))

# plt.subplot(1, 2, 1)
# plt.plot(history.history['loss'], label='Perte (entraînement)')
# plt.plot(history.history['val_loss'], label='Perte (validation)')
# plt.title('Perte')
# plt.xlabel('Epochs')
# plt.ylabel('Perte')
# plt.legend()

# plt.subplot(1, 2, 2)
# plt.plot(history.history['accuracy'], label='Précision (entraînement)')
# plt.plot(history.history['val_accuracy'], label='Précision (validation)')
# plt.title('Précision')
# plt.xlabel('Epochs')
# plt.ylabel('Précision')
# plt.legend()

# plt.show()

model.save('model.keras')
